#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const cf_manager_stack_1 = require("../lib/cf-manager-stack");
const cf_manager_frontend_stack_1 = require("../lib/cf-manager-frontend-stack");
const cf_manager_backend_stack_1 = require("../lib/cf-manager-backend-stack");
const cf_manager_status_monitor_stack_1 = require("../lib/cf-manager-status-monitor-stack");
const app = new cdk.App();
// Environment configuration
const env = {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION
};
// Core stack with DynamoDB tables and Cognito
const coreStack = new cf_manager_stack_1.CfManagerStack(app, 'CfManagerStack', {
    env,
    description: 'CloudFront Manager core stack with DynamoDB tables and Cognito'
});
// Frontend stack
const frontendStack = new cf_manager_frontend_stack_1.CfManagerFrontendStack(app, 'CfManagerFrontendStack', {
    env,
    description: 'CloudFront Manager frontend stack'
});
// Backend stack
const backendStack = new cf_manager_backend_stack_1.CfManagerBackendStack(app, 'CfManagerBackendStack', {
    env,
    description: 'CloudFront Manager backend stack with API Gateway and Lambda functions',
    userPool: coreStack.userPool,
    distributionsTable: coreStack.distributionsTable,
    templatesTable: coreStack.templatesTable,
    historyTable: coreStack.historyTable,
    originsTable: coreStack.originsTable
});
// Status Monitor stack
const statusMonitorStack = new cf_manager_status_monitor_stack_1.CfManagerStatusMonitorStack(app, 'CfManagerStatusMonitorStack', {
    env,
    description: 'CloudFront Manager status monitoring stack with Step Functions',
    distributionsTableName: coreStack.distributionsTable.tableName,
    historyTableName: coreStack.historyTable.tableName
});
// Add dependency to ensure the core stack is deployed first
statusMonitorStack.addDependency(coreStack);
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2YtbWFuYWdlci1jZGsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9iaW4vY2YtbWFuYWdlci1jZGsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdUNBQXFDO0FBQ3JDLG1DQUFtQztBQUNuQyw4REFBeUQ7QUFDekQsZ0ZBQTBFO0FBQzFFLDhFQUF3RTtBQUN4RSw0RkFBcUY7QUFFckYsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsNEJBQTRCO0FBQzVCLE1BQU0sR0FBRyxHQUFHO0lBQ1YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO0lBQ3hDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQjtDQUN2QyxDQUFDO0FBRUYsOENBQThDO0FBQzlDLE1BQU0sU0FBUyxHQUFHLElBQUksaUNBQWMsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUU7SUFDMUQsR0FBRztJQUNILFdBQVcsRUFBRSxnRUFBZ0U7Q0FDOUUsQ0FBQyxDQUFDO0FBRUgsaUJBQWlCO0FBQ2pCLE1BQU0sYUFBYSxHQUFHLElBQUksa0RBQXNCLENBQUMsR0FBRyxFQUFFLHdCQUF3QixFQUFFO0lBQzlFLEdBQUc7SUFDSCxXQUFXLEVBQUUsbUNBQW1DO0NBQ2pELENBQUMsQ0FBQztBQUVILGdCQUFnQjtBQUNoQixNQUFNLFlBQVksR0FBRyxJQUFJLGdEQUFxQixDQUFDLEdBQUcsRUFBRSx1QkFBdUIsRUFBRTtJQUMzRSxHQUFHO0lBQ0gsV0FBVyxFQUFFLHdFQUF3RTtJQUNyRixRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7SUFDNUIsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLGtCQUFrQjtJQUNoRCxjQUFjLEVBQUUsU0FBUyxDQUFDLGNBQWM7SUFDeEMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxZQUFZO0lBQ3BDLFlBQVksRUFBRSxTQUFTLENBQUMsWUFBWTtDQUNyQyxDQUFDLENBQUM7QUFFSCx1QkFBdUI7QUFDdkIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLDZEQUEyQixDQUFDLEdBQUcsRUFBRSw2QkFBNkIsRUFBRTtJQUM3RixHQUFHO0lBQ0gsV0FBVyxFQUFFLGdFQUFnRTtJQUM3RSxzQkFBc0IsRUFBRSxTQUFTLENBQUMsa0JBQWtCLENBQUMsU0FBUztJQUM5RCxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVM7Q0FDbkQsQ0FBQyxDQUFDO0FBRUgsNERBQTREO0FBQzVELGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUU1QyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ2ZNYW5hZ2VyU3RhY2sgfSBmcm9tICcuLi9saWIvY2YtbWFuYWdlci1zdGFjayc7XG5pbXBvcnQgeyBDZk1hbmFnZXJGcm9udGVuZFN0YWNrIH0gZnJvbSAnLi4vbGliL2NmLW1hbmFnZXItZnJvbnRlbmQtc3RhY2snO1xuaW1wb3J0IHsgQ2ZNYW5hZ2VyQmFja2VuZFN0YWNrIH0gZnJvbSAnLi4vbGliL2NmLW1hbmFnZXItYmFja2VuZC1zdGFjayc7XG5pbXBvcnQgeyBDZk1hbmFnZXJTdGF0dXNNb25pdG9yU3RhY2sgfSBmcm9tICcuLi9saWIvY2YtbWFuYWdlci1zdGF0dXMtbW9uaXRvci1zdGFjayc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbi8vIEVudmlyb25tZW50IGNvbmZpZ3VyYXRpb25cbmNvbnN0IGVudiA9IHsgXG4gIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIFxuICByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiBcbn07XG5cbi8vIENvcmUgc3RhY2sgd2l0aCBEeW5hbW9EQiB0YWJsZXMgYW5kIENvZ25pdG9cbmNvbnN0IGNvcmVTdGFjayA9IG5ldyBDZk1hbmFnZXJTdGFjayhhcHAsICdDZk1hbmFnZXJTdGFjaycsIHtcbiAgZW52LFxuICBkZXNjcmlwdGlvbjogJ0Nsb3VkRnJvbnQgTWFuYWdlciBjb3JlIHN0YWNrIHdpdGggRHluYW1vREIgdGFibGVzIGFuZCBDb2duaXRvJ1xufSk7XG5cbi8vIEZyb250ZW5kIHN0YWNrXG5jb25zdCBmcm9udGVuZFN0YWNrID0gbmV3IENmTWFuYWdlckZyb250ZW5kU3RhY2soYXBwLCAnQ2ZNYW5hZ2VyRnJvbnRlbmRTdGFjaycsIHtcbiAgZW52LFxuICBkZXNjcmlwdGlvbjogJ0Nsb3VkRnJvbnQgTWFuYWdlciBmcm9udGVuZCBzdGFjaydcbn0pO1xuXG4vLyBCYWNrZW5kIHN0YWNrXG5jb25zdCBiYWNrZW5kU3RhY2sgPSBuZXcgQ2ZNYW5hZ2VyQmFja2VuZFN0YWNrKGFwcCwgJ0NmTWFuYWdlckJhY2tlbmRTdGFjaycsIHtcbiAgZW52LFxuICBkZXNjcmlwdGlvbjogJ0Nsb3VkRnJvbnQgTWFuYWdlciBiYWNrZW5kIHN0YWNrIHdpdGggQVBJIEdhdGV3YXkgYW5kIExhbWJkYSBmdW5jdGlvbnMnLFxuICB1c2VyUG9vbDogY29yZVN0YWNrLnVzZXJQb29sLFxuICBkaXN0cmlidXRpb25zVGFibGU6IGNvcmVTdGFjay5kaXN0cmlidXRpb25zVGFibGUsXG4gIHRlbXBsYXRlc1RhYmxlOiBjb3JlU3RhY2sudGVtcGxhdGVzVGFibGUsXG4gIGhpc3RvcnlUYWJsZTogY29yZVN0YWNrLmhpc3RvcnlUYWJsZSxcbiAgb3JpZ2luc1RhYmxlOiBjb3JlU3RhY2sub3JpZ2luc1RhYmxlXG59KTtcblxuLy8gU3RhdHVzIE1vbml0b3Igc3RhY2tcbmNvbnN0IHN0YXR1c01vbml0b3JTdGFjayA9IG5ldyBDZk1hbmFnZXJTdGF0dXNNb25pdG9yU3RhY2soYXBwLCAnQ2ZNYW5hZ2VyU3RhdHVzTW9uaXRvclN0YWNrJywge1xuICBlbnYsXG4gIGRlc2NyaXB0aW9uOiAnQ2xvdWRGcm9udCBNYW5hZ2VyIHN0YXR1cyBtb25pdG9yaW5nIHN0YWNrIHdpdGggU3RlcCBGdW5jdGlvbnMnLFxuICBkaXN0cmlidXRpb25zVGFibGVOYW1lOiBjb3JlU3RhY2suZGlzdHJpYnV0aW9uc1RhYmxlLnRhYmxlTmFtZSxcbiAgaGlzdG9yeVRhYmxlTmFtZTogY29yZVN0YWNrLmhpc3RvcnlUYWJsZS50YWJsZU5hbWVcbn0pO1xuXG4vLyBBZGQgZGVwZW5kZW5jeSB0byBlbnN1cmUgdGhlIGNvcmUgc3RhY2sgaXMgZGVwbG95ZWQgZmlyc3RcbnN0YXR1c01vbml0b3JTdGFjay5hZGREZXBlbmRlbmN5KGNvcmVTdGFjayk7XG5cbmFwcC5zeW50aCgpO1xuIl19